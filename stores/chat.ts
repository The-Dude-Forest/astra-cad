import { defineStore } from "pinia";
import type { UIMessage } from "ai";

export type ChatSession = {
	id: string;
	title?: string;
	messages: UIMessage[];
	createdAt: number;
	updatedAt: number;
};

export const useChatStore = defineStore(
	"chat",
	() => {
		// Store all chat sessions
		const chats = ref<Record<string, ChatSession>>({});

		// Current active chat ID ("new" for new chat, or actual chat ID)
		const currentChatId = ref<string>("new");

		// Get current chat
		const currentChat = computed(() => {
			if (currentChatId.value === "new") {
				return null;
			}
			return chats.value[currentChatId.value] || null;
		});

		// Get current messages
		const currentMessages = computed(() => {
			return currentChat.value?.messages || [];
		});

		// Get all chats as array, sorted by updatedAt
		const chatList = computed(() => {
			return Object.values(chats.value).sort(
				(a, b) => b.updatedAt - a.updatedAt
			);
		});

		// Create a new chat
		const createChat = (id?: string): string => {
			const chatId = id || `chat-${Date.now()}`;
			const now = Date.now();

			chats.value[chatId] = {
				id: chatId,
				messages: [],
				createdAt: now,
				updatedAt: now,
			};

			currentChatId.value = chatId;
			return chatId;
		};

		// Set current chat
		const setCurrentChat = (chatId: string) => {
			if (chatId === "new") {
				currentChatId.value = "new";
			} else if (chats.value[chatId]) {
				currentChatId.value = chatId;
			}
		};

		// Add message to current chat
		const addMessage = (message: UIMessage) => {
			// If current chat is "new", create a new chat first
			if (currentChatId.value === "new") {
				createChat();
			}

			const chat = chats.value[currentChatId.value];
			if (chat) {
				chat.messages.push(message);
				chat.updatedAt = Date.now();

				// Title will be generated by LLM via onData handler
				// No auto-generation here anymore
			}
		};

		// Update last message in current chat
		const updateLastMessage = (message: UIMessage) => {
			if (currentChatId.value === "new") return;

			const chat = chats.value[currentChatId.value];
			if (chat && chat.messages.length > 0) {
				chat.messages[chat.messages.length - 1] = message;
				chat.updatedAt = Date.now();
			}
		};

		// Set all messages for current chat
		const setMessages = (messages: UIMessage[]) => {
			if (currentChatId.value === "new" && messages.length > 0) {
				createChat();
			}

			const chat = chats.value[currentChatId.value];
			if (chat) {
				chat.messages = messages;
				chat.updatedAt = Date.now();
			}
		};

		// Update chat title
		const updateChatTitle = (chatId: string, title: string) => {
			if (chats.value[chatId]) {
				chats.value[chatId].title = title;
				chats.value[chatId].updatedAt = Date.now();
			}
		};

		// Delete a chat
		const deleteChat = (chatId: string) => {
			delete chats.value[chatId];
			if (currentChatId.value === chatId) {
				currentChatId.value = "new";
			}
		};

		// Clear current chat messages
		const clearCurrentChat = () => {
			if (currentChatId.value !== "new") {
				const chat = chats.value[currentChatId.value];
				if (chat) {
					chat.messages = [];
					chat.updatedAt = Date.now();
				}
			}
			currentChatId.value = "new";
		};

		// Clear all chats
		const clearAllChats = () => {
			chats.value = {};
			currentChatId.value = "new";
		};

		return {
			chats,
			currentChatId,
			currentChat,
			currentMessages,
			chatList,
			createChat,
			setCurrentChat,
			addMessage,
			updateLastMessage,
			setMessages,
			updateChatTitle,
			deleteChat,
			clearCurrentChat,
			clearAllChats,
		};
	},
	{
		persist: [
			{
				pick: ["chats", "currentChatId"],
				storage: localStorage,
			},
		],
	}
);
